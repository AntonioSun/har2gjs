@GrabConfig(systemClassLoader = true)
@Grab('net.simonix.scripts:groovy-jmeter')

@groovy.transform.BaseScript net.simonix.dsl.jmeter.TestScript script

{{ $host := ENV "GJS_Host" -}}
start {
  plan {
    arguments {
      argument(name: 'c_app_host', value: `${__P(c_app_host, "{{ coalesce $host "localhost"}}")}`)
      argument(name: 'c_lt_users', value: `${__P(c_lt_users, {{ coalesce (ENV "GJS_LT_USERS") 10}})}`) // loadtest users
      argument(name: 'c_lt_ramp', value: `${__P(c_lt_ramp, {{ coalesce (ENV "GJS_LT_RAMP") 5}})}`) // loadtest ramp up in seconds
      argument(name: 'c_tt_range', value: `${__P(c_tt_range, {{ coalesce (ENV "GJS_TT_RANGE") 6000}})}`) // Maximum random number of ms to delay
      argument(name: 'c_tt_delay', value: `${__P(c_tt_delay, {{ coalesce (ENV "GJS_TT_DELAY") 2000}})}`) // Ms to delay in addition to random time
      {{range .Arguments -}}
      argument(name: '{{.Name}}', value: '{{.Value}}')
      {{end -}}
    }

    defaults(protocol: 'https', domain: '${c_app_host}', port: 80)

    group(users: ${c_lt_users}, rampUp: ${c_lt_ramp}) {
      headers {
	header(name: 'Host', value: '{{$host}}')
	header(name: 'Origin', value: '{{$host}}')
	header(name: 'Referer', value: '{{$host}}')
	header(name: 'Connection', value: 'keep-alive')
	header(name: 'Cache-Control', value: 'max-age=0')
	header(name: 'Upgrade-Insecure-Requests', value: '1')
	header(name: 'User-Agent', value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36')
      }
      cookies()
      cache()
      {{- range .Reqs}}
      {{- $url := .URL}}{{$urlname := fpBase $url}}

      transaction('TR0_{{$urlname}}') {
        http('{{.Method}} {{$url}}') {
	  {{if .Headers}}headers {
	    {{range .Headers -}}
	    header(name: '{{.Name}}', value: '{{.Value}}'){{end}}
	  }
{{end}}
	  {{- if .QueryString}}{{$length := len .QueryString }}{{ if ne $length 0 }}
          params values: {{.QueryString}}{{end}}
{{end}}
          check_response {
            status() eq 200
          }

          //extract_jmes expressions: '.book.id', variables: 'p_bookId'
        }
      }{{end}}
    }

    summary(file: '{{ coalesce $host "result"}}.jtl', enabled: true)

    {{ if ne (ENV "GJS_InfluxdbUse") "" -}}
    backend(name: 'InfluxDb Backend', enabled: true) {
      arguments {
        argument(name: 'influxdbMetricsSender', value: 'org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender')
        argument(name: 'influxdbUrl', value: 'http://{{ENV "GJS_InfluxdbUrl"}}:8086/write?db=jmeter')
        argument(name: 'application', value: '''${__groovy(("${__TestPlanName}").replace('.jmx',''),)}''')
        argument(name: 'measurement', value: 'jmeter')
        argument(name: 'summaryOnly', value: 'false')
        argument(name: 'samplersRegex', value: '.*')
        argument(name: 'percentiles', value: '90;95;99')
        argument(name: 'testTitle', value: "{{ENV "GJS_App"}} - users: ${jmt_users}, rampup: ${jmt_ramp}")
        argument(name: "eventTags", value: '')
      }
    }
    {{end -}}
  }
}
