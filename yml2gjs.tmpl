@GrabConfig(systemClassLoader = true)
@Grab('net.simonix.scripts:groovy-jmeter')

@groovy.transform.BaseScript net.simonix.dsl.jmeter.TestScript script

{{ $host := ENV "GJS_Host" -}} {{- $hosturl := print "https://" $host -}}
{{- $app := ENV "GJS_App" -}}
start {
  plan {
    variables {
      variable(name: 'c_app_host', value: '${__P(c_app_host, {{ coalesce $host "localhost"}})}', description: 'Test server host name')
      variable(name: 'c_app_error_kw', value: '${__P(c_app_error_kw,Wrong)}', description: 'keyword indicates wrong application returns')
      variable(name: 'c_lt_users', value: '${__P(c_lt_users, {{ coalesce (ENV "GJS_LT_USERS") 10}})}', description: 'loadtest users')
      variable(name: 'c_lt_ramp', value: '${__P(c_lt_ramp, {{ coalesce (ENV "GJS_LT_RAMP") 5}})}', description: 'loadtest ramp up in seconds')
      variable(name: 'c_tt_range', value: '${__P(c_tt_range, {{ coalesce (ENV "GJS_TT_RANGE") 6000}})}', description: 'Think Time: Maximum random number of ms to delay')
      variable(name: 'c_tt_delay', value: '${__P(c_tt_delay, {{ coalesce (ENV "GJS_TT_DELAY") 2000}})}', description: 'Think Time: Ms to delay in addition to random time')
      variable(name: 'c_pt_range', value: '${__P(c_pt_range, {{ coalesce (ENV "GJS_TT_RANGE") 120000}})}', description: 'Pace Time: Maximum random number of ms to delay')
      variable(name: 'c_pt_delay', value: '${__P(c_pt_delay, {{ coalesce (ENV "GJS_TT_DELAY") 60000}})}', description: 'Pace Time: Ms to delay in addition to random time')
      {{range .Variables -}}
      variable(name: '{{.Name}}', value: '{{.Value}}')
      {{end -}}
    }

    defaults(protocol: 'https', domain: '${c_app_host}', port: 443)

    group(users: '${c_lt_users}', rampUp: '${c_lt_ramp}') {
      headers {
        header(name: 'Host', value: '${c_app_host}')
        header(name: 'Origin', value: '${c_app_host}')
        header(name: 'Referer', value: '${c_app_host}')
        header(name: 'Connection', value: 'keep-alive')
        header(name: 'Cache-Control', value: 'max-age=0')
        header(name: 'Upgrade-Insecure-Requests', value: '1')
        header(name: 'User-Agent', value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36')
      }
      cookies()
      cache()
      check_response {
        status() eq 200
      }
      check_response applyTo: 'parent', {
        text(not) contains '${c_app_error_kw}'
      }
      {{- range .Reqs}}
      {{- $url := regexpReplaceAllString (stringsReplace .URL $hosturl "" 1) `\?.*$` ""}}
      {{- $urlname := fpBase $url}}

      transaction('T0x_{{$urlname}}') {
        http (method: '{{.Method}}', path: '{{$url}}', name: 'T0r_{{$urlname}}') {
          {{if .Headers}}headers {
            {{- range .Headers}}
            header(name: '{{.Name}}', value: '{{.Value}}')
            {{- end}}
          }{{end}}
          {{- if or .PostData.Params .QueryString}}
          params {
            {{if .PostData.Params -}} {{- range .PostData.Params -}}
            param(name: '{{.Name}}', value: '{{.Value}}')
            {{end -}}
            {{ else if .QueryString}} {{- range .QueryString -}}
            param(name: '{{.Name}}', value: '{{.Value}}')
            {{end -}}
            {{end}}
          }
          {{- else if .PostData.Text}}
          body '''\
{{.PostData.Text}}
'''
          {{- end}}

          // check_response {
          //   status() eq 200
          // }

          //extract_jmes expressions: '.book.id', variables: 'p_bookId'
        }
      }{{end}}
    }

    {{ if ne (ENV "GJS_InfluxdbUse") "" -}}
    backend(name: 'InfluxDb Backend', enabled: true) {
      arguments {
        argument(name: 'influxdbMetricsSender', value: 'org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender')
        argument(name: 'influxdbUrl', value: 'http://{{ENV "GJS_InfluxdbUrl"}}:8086/write?db=jmeter')
        argument(name: 'application', value: '''${__groovy(("${__TestPlanName}").replace('.jmx',''),)}''')
        argument(name: 'measurement', value: 'jmeter')
        argument(name: 'summaryOnly', value: 'false')
        argument(name: 'samplersRegex', value: '.*')
        argument(name: 'percentiles', value: '90;95;99')
        argument(name: 'testTitle', value: "{{ENV "GJS_App"}} - users: ${jmt_users}, rampup: ${jmt_ramp}")
        argument(name: "eventTags", value: '')
      }
    }
    {{end -}}

    summary(file: '{{ coalesce (ENV "GJS_App") "result"}}.jtl') //, enabled: true
    view () // View Result Tree
  }
}
